TestNG: Test Next Generation is a testing framework inspired by JUnit and NUnit only in Java
-> Powerful features such as parallel execution, grouping, data-driven testing and better reporting
-> Unit test, functional test, integration test
------------------------------------------------------------------------------------------------------------------
Basic Structure:

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="TestNG">
    <test name="Practice">
        <classes>
            <class name="TestNG.TestNG_Practice"> <!-- Syntax: <class name="package.className"> -->
                <methods>
                    <include name="run" /> <!-- Syntax: <include name="MethodName inside defined class" /> -->
                </methods>
            </class>
        </classes>
    </test>
</suite>
-----------------------------------------------------------------------------------------------------------------
Assertions: Comparison between Actual and Expected

assertEquals - Positive scenarios
assertNotEquals - Negative scenarios
assertTrue
assertFalse
assertNull
assertNotNull

//Instead of writing below line everytime calling method with Assert class name
Assert.assertEquals(driver.findElement(By.id("output")).getText(),"You selected alert popup");

//can write as below by importing static import class statement
assertEquals(driver.findElement(By.id("output")).getText(),"You selected alert popup");

//By using this static import statement
import static org.testng.Assert.*; //use this line to reduce

HardAssertion: Throws exception immediately upon failure and won't execute rest - Assert class all methods comes under Hart Assertions
SoftAssertion: Throws exception at end of test or at specified location - methods from SoftAssert

As Assert is static class no need of object creation, but for soft assert
SoftAssert softassert = new SoftAssert(); //object creation
softassert.assertEquals(actual,expected,"message"); //assertion
softassert.assertAll();//throws error at specified location
------------------------------------------------------------------------------------------------------------------

Annotation: TestNG just used annotations from Java not created newly (Ex: @Override, @FunctionalInterface)
-> it is a form of metadatathat can be added to the java source code.

Hierarchy of TestNG Annotations
The sequence in which TestNG annotations are executed is as follows:

@BeforeSuite: This method runs before the execution of all the test methods in the suite.
@BeforeTest: This method runs before the execution of all the test methods in the test.
@BeforeClass: This method runs before the first method of the current class is invoked.
@BeforeMethod: This method runs before each test method.
@Test: This is the actual test method where the main business logic resides.
@AfterMethod: This method runs after each test method.
@AfterClass: This method runs after all the test methods of the current class have been executed.
@AfterTest: This method runs after the execution of all the test methods in the test.
@AfterSuite: This method runs after the execution of all the test methods in the suite.

@Parameters: To pass any info to testNG methods need to use Parameters
-> should declare below suite tag in testng.xml along with method where need to use parameters
-> <parameter name="browserName" value="Chrome"></parameter> //in testNG.xml
-> @Parameters({"browsername","url"}) //above method if multiple variables use array
-> @Parameters("url") //pass single string if single variable

@OptionalParameter: if user forgot to mention value to parameter then default value will be considered
-> Syntax:
    public void method_Name(@Optional("chrome") String browsername){ }

    If user forgot to pass browser name in testng.xml then it consider chrome
    If user provide edge in testng.xml then priority will comes to edge

@BeforeGroup:
@AfterGroup:
@DataProvider:

@Factory:
@Listeners:
@Ignore:

-----------------------------------------------------------------------------------------------------------------
Enable or Disable Tests:

In testng.xml:
<test name="Basic Controls" enabled="true"> <!-- By default it will be true-->
<test name="Basic Controls" enabled="false"> <!-- to Disable -->

In Classes or methods:
@Test(enabled=False)
------------------------------------------------------------------------------------------------------------------
Prioritize Tests:

@Test(priority=1)
-> If we don't mention priority they will execute in ASCI order so, need to mention priority
-> Default value of priority is "0" that means priority with 0 will execute 1st, then after priority 1,2,3...
-> we can pass -ve values (-1 will execute 1st and 0 will execute after that)
-> If we provide same priority, then it follows ASCI among those same priority tests
-------------------------------------------------------------------------------------------------------------
Ignore Tests: Added at method level

@Ignore
@Test(enabled=True) //still Ignores bcoz of priority Ignore Vs Enabled
public method(){}..

-> To Ignore all tests in class level declare @Ignore at class level
-> To Ignore package level - create package-info.java in
In package-info.java

@Ignore
package package_Name
import org.testng.annotations.Ignore;
-----------------------------------------------------------------------------------------------------------------
Grouping Tests:

-> We can create diff .xml files for diff categories
Ex: Smoke.xml, Regression.xml...

Instead of creating multiple .xml files we can group them and run accordingly
-> Declaration at class level
@Test(group={"Smoke","sanity","regression"}) //groups expects string of array
-> Declaration at .xml level
-> If group not assigned to a method then it won't be considered bcoz not part of group
-> if we don't introduce groups concept in .xml then all tests will be considered for execution
> Group of Groups: Using define tags in .xml

<suite name="Selenium Practice">
    <groups> <!--groups at suite level applicable to all tests-->
        <run>
            <include name="smoke"/>
        </run>
    </groups>
    <parameter name="browsername" value="Edge"/>
    <test name="Basic Controls">
        <groups> <!-- Declaring groups at test level only applicable to respective tests-->
            <define name="Daily">
                <include name="smoke"/>
                <include name="functional"/>
            </define>
            <define name="Weekly">
                <include name="smoke"/>
                <include name="functional"/>
                <include name="regression"/>
            </define>
            <run>
                <include name="Daily"/>
            </run>
        </groups>
        <classes>
            <class name="TestNG.TestNG_Groups"/>
        </classes>
    </test>
</suite>

RegEx:
If groups named like windows.smoke, windows.functional....
then we can use windows.* to run all
----------------------------------------------------------------------------------------------------------------
Test Dependancy: Tests dependent on pre-tests

@Test(dependsOnMethods={"LaunchBrowser","Login"}) //will execute only after those methods get passed else skip the execution
-> Even though we declare priority it will consider dependancy 1st
@Test(dependsOnMethods={"LaunchBrowser","Login"},alwaysRun=true)
-> But if alwaysRun declares the it will consider over dependancy

Group Dependencies: Achieved via .xml file using dependencies tags

<suite name="Selenium Practice">
    <parameter name="browsername" value="Edge"/>
    <test name="Basic Controls">
        <groups>
            <dependencies>
                <group name="sanity" depends-on="smoke"></group>
                <group name="regression" depends-on="sanity"></group>
            </dependencies>
        </groups>
        <classes>
            <class name="TestNG.TestNG_GroupDependencies"/>
        </classes>
    </test>
</suite>

---------------------------------------------------------------------------------------------------------------
Data Provider:
